// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wirex

import (
	"context"
	"github.com/markjiang0/mjwallet/internal/mods"
	"github.com/markjiang0/mjwallet/internal/mods/rbac"
	"github.com/markjiang0/mjwallet/internal/mods/rbac/api"
	"github.com/markjiang0/mjwallet/internal/mods/rbac/biz"
	"github.com/markjiang0/mjwallet/internal/mods/rbac/dal"
	"github.com/markjiang0/mjwallet/internal/mods/sys"
	api2 "github.com/markjiang0/mjwallet/internal/mods/sys/api"
	biz2 "github.com/markjiang0/mjwallet/internal/mods/sys/biz"
	dal2 "github.com/markjiang0/mjwallet/internal/mods/sys/dal"
	"github.com/markjiang0/mjwallet/internal/mods/wallet"
	api3 "github.com/markjiang0/mjwallet/internal/mods/wallet/api"
	biz3 "github.com/markjiang0/mjwallet/internal/mods/wallet/biz"
	dal3 "github.com/markjiang0/mjwallet/internal/mods/wallet/dal"
	"github.com/markjiang0/mjwallet/internal/mods/wallet/task"
	"github.com/markjiang0/mjwallet/pkg/util"
)

// Injectors from wire.go:

func BuildInjector(ctx context.Context) (*Injector, func(), error) {
	db, cleanup, err := InitDB(ctx)
	if err != nil {
		return nil, nil, err
	}
	cacher, cleanup2, err := InitCacher(ctx)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	auther, cleanup3, err := InitAuth(ctx)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	trans := &util.Trans{
		DB: db,
	}
	menu := &dal.Menu{
		DB: db,
	}
	menuResource := &dal.MenuResource{
		DB: db,
	}
	roleMenu := &dal.RoleMenu{
		DB: db,
	}
	bizMenu := &biz.Menu{
		Cache:           cacher,
		Trans:           trans,
		MenuDAL:         menu,
		MenuResourceDAL: menuResource,
		RoleMenuDAL:     roleMenu,
	}
	apiMenu := &api.Menu{
		MenuBIZ: bizMenu,
	}
	role := &dal.Role{
		DB: db,
	}
	userRole := &dal.UserRole{
		DB: db,
	}
	bizRole := &biz.Role{
		Cache:       cacher,
		Trans:       trans,
		RoleDAL:     role,
		RoleMenuDAL: roleMenu,
		UserRoleDAL: userRole,
	}
	apiRole := &api.Role{
		RoleBIZ: bizRole,
	}
	user := &dal.User{
		DB: db,
	}
	bizUser := &biz.User{
		Cache:       cacher,
		Trans:       trans,
		UserDAL:     user,
		UserRoleDAL: userRole,
	}
	apiUser := &api.User{
		UserBIZ: bizUser,
	}
	login := &biz.Login{
		Cache:       cacher,
		Auth:        auther,
		UserDAL:     user,
		UserRoleDAL: userRole,
		MenuDAL:     menu,
		UserBIZ:     bizUser,
	}
	apiLogin := &api.Login{
		LoginBIZ: login,
	}
	casbinx := &rbac.Casbinx{
		Cache:           cacher,
		MenuDAL:         menu,
		MenuResourceDAL: menuResource,
		RoleDAL:         role,
	}
	rbacRBAC := &rbac.RBAC{
		DB:       db,
		MenuAPI:  apiMenu,
		RoleAPI:  apiRole,
		UserAPI:  apiUser,
		LoginAPI: apiLogin,
		Casbinx:  casbinx,
	}
	logger := &dal2.Logger{
		DB: db,
	}
	bizLogger := &biz2.Logger{
		LoggerDAL: logger,
	}
	apiLogger := &api2.Logger{
		LoggerBIZ: bizLogger,
	}
	sysSYS := &sys.SYS{
		DB:        db,
		LoggerAPI: apiLogger,
	}
	cron, cleanup4, err := InitCronJob(ctx)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	account := &dal3.Account{
		DB: db,
	}
	bizAccount := &biz3.Account{
		Cache:      cacher,
		Trans:      trans,
		AccountDAL: account,
	}
	apiAccount := &api3.Account{
		AccountBIZ: bizAccount,
	}
	transaction := &dal3.Transaction{
		DB: db,
	}
	bizTransaction := &biz3.Transaction{
		TransactionDAL: transaction,
		AccountDAL:     account,
	}
	apiTransaction := &api3.Transaction{
		TransactionBIZ: bizTransaction,
	}
	taskAccount := &task.Account{
		AccountBIZ: bizAccount,
	}
	taskTransaction := &task.Transaction{
		TransactionBIZ: bizTransaction,
	}
	telegramBot := &dal3.TelegramBot{
		DB: db,
	}
	bizTelegramBot := &biz3.TelegramBot{
		TelegramBotDAL: telegramBot,
		TransactionBIZ: bizTransaction,
		AccountBIZ:     bizAccount,
	}
	apiTelegramBot := &api3.TelegramBot{
		TelegramBotBIZ: bizTelegramBot,
	}
	taskTelegramBot := &task.TelegramBot{
		TelegramBotBIZ: bizTelegramBot,
	}
	walletWALLET := &wallet.WALLET{
		DB:              db,
		C:               cron,
		AccountAPI:      apiAccount,
		TransactionAPI:  apiTransaction,
		AccountTask:     taskAccount,
		TransactionTask: taskTransaction,
		TelegramAPI:     apiTelegramBot,
		TelegramTask:    taskTelegramBot,
		TelegramBIZ:     bizTelegramBot,
	}
	modsMods := &mods.Mods{
		RBAC:   rbacRBAC,
		SYS:    sysSYS,
		WALLET: walletWALLET,
	}
	injector := &Injector{
		DB:    db,
		Cache: cacher,
		Auth:  auther,
		M:     modsMods,
	}
	return injector, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}
